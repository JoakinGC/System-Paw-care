package com.veterinary.sistema.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DatelleCompraAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatelleCompraAllPropertiesEquals(DatelleCompra expected, DatelleCompra actual) {
        assertDatelleCompraAutoGeneratedPropertiesEquals(expected, actual);
        assertDatelleCompraAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatelleCompraAllUpdatablePropertiesEquals(DatelleCompra expected, DatelleCompra actual) {
        assertDatelleCompraUpdatableFieldsEquals(expected, actual);
        assertDatelleCompraUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatelleCompraAutoGeneratedPropertiesEquals(DatelleCompra expected, DatelleCompra actual) {
        assertThat(expected)
            .as("Verify DatelleCompra auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatelleCompraUpdatableFieldsEquals(DatelleCompra expected, DatelleCompra actual) {
        assertThat(expected)
            .as("Verify DatelleCompra relevant properties")
            .satisfies(e -> assertThat(e.getCantidad()).as("check cantidad").isEqualTo(actual.getCantidad()))
            .satisfies(e -> assertThat(e.getPrecioUnitario()).as("check precioUnitario").isEqualTo(actual.getPrecioUnitario()))
            .satisfies(e -> assertThat(e.getTotalProducto()).as("check totalProducto").isEqualTo(actual.getTotalProducto()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatelleCompraUpdatableRelationshipsEquals(DatelleCompra expected, DatelleCompra actual) {
        assertThat(expected)
            .as("Verify DatelleCompra relationships")
            .satisfies(e -> assertThat(e.getCompra()).as("check compra").isEqualTo(actual.getCompra()))
            .satisfies(e -> assertThat(e.getProducto()).as("check producto").isEqualTo(actual.getProducto()));
    }
}
